单元测试目的不是证明你是对的，而是证明你没有错

单元测试实践：
1.测试方法必须使用@Test进行修饰
2.测试方法必须使用public void进行修饰，不带任何的参数
3.新建一个源代码目录来存放我们的测试代码
4.测试类的包应该和被测试类保持一致
5.测试单元中的每个方法必须可以独立测试，测试方法之间不能有任何依赖
6.测试类使用Test作为类名的后缀，让人容易识别
7.测试方法使用test作为方法名的前缀，让人容易识别

测试失败的两种情况:
测试用例不是用来证明你是对的，而是为了证明你没有错

failure：一般由断言错误引起，输出结果和预期不一致导致
error：代码异常引起，可能测试代码本身的错误，也可能是被测试代码隐藏错误

运行流程：
@Test 将一个普通方法修饰成为一个测试方法
  @Test(expected=XX.class)当出错的时候，将抛出的异常捕获，测试通过
  @Test(timeout=20（毫秒）)方法执行时间做限制，超过这个时间，方法停止执行，测试不通过（可以在做性能测试的时候使用）


@BeforeClass//所有方法运行前运行，只运行一次，static 修饰
@AfterClass//所有方法运行后运行，只运行一次，static 修饰
@Before 每个方法运行前执行一次
@After 每个方法运行后执行一次
@Ignore 忽略测试本方法，测试运行器会忽略本方法
@RunWith可以更改测试运行器 orig.junit.runner.Runner

测试套件：
测试套件就是组织测试类一起运行
1.写一个作为测试套件的入口方法，这个类不能包含其他方法
2.更改测试运行器为Suite.class
3.将要测试的类作为数组传入到Suite.SuiteClasses({})

示例：
import org.junit.runner.RunWith;
import org.junit.runners.Suite;

测试套件Suite.class
@RunWith(Suite.class)
@Suite.SuiteClasses({CalculateTest.class,TaskTest1.class,TaskTest2.class})
public class SuitTest {

}

参数化设置：
对多组数据同时进行测试
1.更改默认的测试运行器为RunWith(Parameterrized.class)
2.声明一个返回值为Collection的公共静态方法，并用@Parameters进行修饰
4.为测试类声明一个带有参数的公共构造函数，并在其中为之声明变量赋值

import static org.junit.Assert.assertEquals;

import java.util.Arrays;
import java.util.Collection;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;

import com.wr.junit.Calculate;
//参数化设置
@RunWith(Parameterized.class)
public class ParameterTest {

	int expected =0;
	int input1=0;
	int input2=0;
	
	@Parameters
	public static Collection<Object[]>t(){
		return Arrays.asList(new Object[][]{
				{3,1,2},
				{5,3,2}
		});
	}
	
	
	public ParameterTest(int expected,int input1,int input2){
		this.expected=expected;
		this.input1=input1;
		this.input2=input2;
	}
	
	@Test
    public void testAdd(){
		assertEquals(expected, new Calculate().add(input1, input2));
	}
	
}
