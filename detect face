package com.wade.myfacedetection;

import android.content.Context;
import android.os.PowerManager;
import android.util.Log;

/**
 * Created by wWX451576 on 2017/4/20.
 */

public class PowerManagerWakeLock {

    private static PowerManager.WakeLock wakeLock;
    private static PowerManager pm;

    /**
     * 开启 保持屏幕唤醒
     */
    public static void acquire(Context context) {
        Log.e("----->FaceDetect", "lock wake up");
        if (pm == null) {
            pm = (PowerManager) context.getSystemService(Context.POWER_SERVICE);
        }

        getWakeLock();

        Log.e("----->FaceDetect", "is Lighted1:" + wakeLock.isHeld());
        if (!wakeLock.isHeld()) {
            wakeLock.acquire();
        }
        Log.e("----->FaceDetect", "is Lighted2:" + wakeLock.isHeld());
    }

    private static PowerManager.WakeLock getWakeLock() {
        if (wakeLock == null) {
            wakeLock = pm.newWakeLock(PowerManager.SCREEN_BRIGHT_WAKE_LOCK | PowerManager.ON_AFTER_RELEASE, "PowerManagerWakeLock");
        }
        return wakeLock;
    }

    /**
     * 关闭 保持屏幕唤醒
     */
    public static void release() {
        if (wakeLock != null) {
            Log.e("----->FaceDetect", "lock shut down");
            wakeLock.release();
            wakeLock = null;
        }
    }
}
===================================================================================================================

    private static ConfigSet configSet;

    public static ConfigSet getInstance(){
        if(configSet==null){
            configSet=new ConfigSet();
        }
        return configSet;
    }

    public int[] getRawResources(){
        int[] rawResources = new int[]{
                R.raw.lbpcascade_frontalface,
                R.raw.haarcascade_profileface,
                R.raw.haarcascade_frontalcatface_extended,
                R.raw.haarcascade_frontalcatface,
                R.raw.haarcascade_frontalface_alt2,
                R.raw.haarcascade_frontalface_alt_tree,
                R.raw.haarcascade_frontalface_alt,
                R.raw.haarcascade_frontalface_default,
                R.raw.haarcascade_lowerbody,
                R.raw.haarcascade_upperbody,
                R.raw.haarcascade_fullbody,
                R.raw.haarcascade_eye_tree_eyeglasses,
                R.raw.haarcascade_eye,
                R.raw.haarcascade_lefteye_2splits,
                R.raw.haarcascade_righteye_2splits,
                R.raw.haarcascade_licence_plate_rus_16stages,
                R.raw.haarcascade_russian_plate_number,
                R.raw.haarcascade_smile
        };

        return rawResources;
    }


    public String[] getHaarXML(){
        String[] haarXML = new String[]{
                "lbpcascade_frontalface.xml",
                "haarcascade_profileface.xml",
                "haarcascade_frontalcatface_extended.xml",
                "haarcascade_frontalcatface.xml",
                "haarcascade_frontalface_alt2.xml",
                "haarcascade_frontalface_alt_tree.xml",
                "haarcascade_frontalface_alt.xml",
                "haarcascade_frontalface_default.xml",
                "haarcascade_lowerbody.xml",
                "haarcascade_upperbody.xml",
                "haarcascade_fullbody.xml",
                "haarcascade_eye_tree_eyeglasses.xml",
                "haarcascade_eye.xml",
                "haarcascade_lefteye_2splits.xml",
                "haarcascade_righteye_2splits.xml",
                "haarcascade_licence_plate_rus_16stages.xml",
                "haarcascade_russian_plate_number.xml",
                "haarcascade_smile.xml"
        };
        return haarXML;
    }
    =============================================================================================================================
    package com.wade.myfacedetection;

import android.app.Activity;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.Bundle;
import android.os.Handler;
import android.os.PowerManager;
import android.os.SystemClock;
import android.provider.Settings;
import android.util.Log;
import android.view.WindowManager;

import org.opencv.android.BaseLoaderCallback;
import org.opencv.android.CameraBridgeViewBase;
import org.opencv.android.CameraBridgeViewBase.CvCameraViewFrame;
import org.opencv.android.CameraBridgeViewBase.CvCameraViewListener2;
import org.opencv.android.LoaderCallbackInterface;
import org.opencv.android.OpenCVLoader;
import org.opencv.core.Mat;
import org.opencv.core.MatOfRect;
import org.opencv.core.Point;
import org.opencv.core.Rect;
import org.opencv.core.Scalar;
import org.opencv.core.Size;
import org.opencv.imgproc.Imgproc;
import org.opencv.objdetect.CascadeClassifier;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;

import static java.lang.Math.round;


public class FdActivity extends Activity implements CvCameraViewListener2 {
    private MainActivity mainAct;
    private static final String TAG = "----->FaceDetect";

    private Mat mRgba;
    private Mat mGray;
    private CascadeClassifier mFaceDetector, mEyeDetector;
    private CameraBridgeViewBase mOpenCvCameraView;

    private float mRelativeFaceSize = 0.2f;
    private int mAbsoluteFaceSize = 0;

    private final int[] rawResources = ConfigSet.getInstance().getRawResources();
    private final String[] haarXML = ConfigSet.getInstance().getHaarXML();
    public static boolean isShow=false;

    static {
        OpenCVLoader.initDebug();
        System.loadLibrary("opencv_java3");
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        Log.i(TAG, "called onCreate");
        super.onCreate(savedInstanceState);
//        getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
        setContentView(R.layout.activity_main);

        mOpenCvCameraView = (CameraBridgeViewBase) findViewById(R.id.fd_activity_surface_view);
        mOpenCvCameraView.setCvCameraViewListener(this);

        mainAct = (MainActivity) MainActivity.mMainActivity;

    }
    @Override
    public void onPause() {
        super.onPause();
        if (mOpenCvCameraView != null)
            mOpenCvCameraView.disableView();
    }

    @Override
    public void onResume() {
        super.onResume();
        mLoaderCallback.onManagerConnected(LoaderCallbackInterface.SUCCESS);
    }

    public void onDestroy() {
        super.onDestroy();
        mOpenCvCameraView.disableView();
        PowerManagerWakeLock.release();
        isShow=false;
    }

    public void onCameraViewStarted(int width, int height) {
        Log.e(TAG,"onCameraViewStarted");
        mGray = new Mat();
        mRgba = new Mat();
    }

    public void onCameraViewStopped() {
        Log.e(TAG,"onCameraViewStopped");
        mGray.release();
        mRgba.release();
    }

    public Mat onCameraFrame(CvCameraViewFrame inputFrame) {

        mRgba = inputFrame.rgba();
        mGray = inputFrame.gray();

        if (mAbsoluteFaceSize == 0) {
            int height = mGray.rows();
            if (round(height * mRelativeFaceSize) > 0) {
                mAbsoluteFaceSize = round(height * mRelativeFaceSize);
            }
        }

        MatOfRect faces = new MatOfRect();
        MatOfRect eyes = new MatOfRect();

        if (mFaceDetector != null) {
            mFaceDetector.detectMultiScale(mGray, faces, 1.3, 5, 3,
                    new Size(mAbsoluteFaceSize, mAbsoluteFaceSize), new Size());

            if (!faces.empty()) {
                Rect[] facesArray = faces.toArray();
                Log.d(TAG, "Faces detected: " + facesArray.length);
                PowerManagerWakeLock.acquire(this);

                for (int i = 0; i < facesArray.length; i++) {

                    Log.e(TAG,"faceInfo-->area:"+facesArray[i].area()+"/height:"+facesArray[i].height+"/width:"+facesArray[i].width+"/br:"+facesArray[i].br()+"/size:"+
                    facesArray[i].size()+"/x:"+facesArray[i].x+"/y:"+facesArray[i].y+"/tl:"+facesArray[i].tl());

                    Point center = new Point((facesArray[i].x + facesArray[i].width / 2), (facesArray[i].y + facesArray[i].height / 2));

                    Imgproc.ellipse(mRgba, center, new Size(facesArray[i].width / 2, facesArray[i].height / 2),
                            0, 0, 360, new Scalar(255, 0, 255), 4, 8, 0);

                    Mat faceROI = new Mat(mGray, facesArray[i]);
                    mEyeDetector.detectMultiScale(faceROI, eyes);
                    Rect[] eyesArray = eyes.toArray();
                    for (int j = 0; j < eyesArray.length; j++) {
                        Point eyeCenter = new Point(facesArray[i].x + eyesArray[j].x + eyesArray[j].width / 2,
                                facesArray[i].y + eyesArray[j].y + eyesArray[j].height / 2);
                        int radius = (int) round((eyesArray[j].width + eyesArray[j].height) * 0.25);

                        Imgproc.circle(mRgba, eyeCenter, radius, new Scalar(255, 0, 0), 4, 8, 0);
                    }
                }
            }else{
                PowerManagerWakeLock.release();

            }
        } else {
            Log.e(TAG, "Detection method is not selected!");
        }
        return mRgba;
    }

    private void setMinFaceSize(float faceSize) {
        mRelativeFaceSize = faceSize;
        mAbsoluteFaceSize = 0;
    }

    private BaseLoaderCallback mLoaderCallback = new BaseLoaderCallback(this) {
        @Override
        public void onManagerConnected(int status) {

            Log.e(TAG,"mLoaderCallback--> onManagerConnected");
            switch (status) {
                case LoaderCallbackInterface.SUCCESS: {
                    Log.i(TAG, "OpenCV Loaded Successfully");
                    setMinFaceSize(0.2f);

                    try {
                        final File cascadeDir = getDir("cascade", Context.MODE_PRIVATE);
                        InputStream is;
                        Log.i(TAG, "OpenCV start mode " + mainAct.getStartMode());
                        is = getResources().openRawResource(rawResources[mainAct.getStartMode()]);
                        final File mCascadeFile = new File(cascadeDir, haarXML[mainAct.getStartMode()]);
                        FileOutputStream os = new FileOutputStream(mCascadeFile);

                        byte[] buffer = new byte[4096];
                        int bytesRead;
                        while ((bytesRead = is.read(buffer)) != -1) {
                            os.write(buffer, 0, bytesRead);
                        }
                        is.close();
                        os.close();

                        mFaceDetector = new CascadeClassifier(mCascadeFile.getAbsolutePath());
                        if (mFaceDetector.empty()) {
                            Log.e(TAG, "Failed to load cascade classifier " + mCascadeFile.toString());
                            mFaceDetector = null;
                        } else {
                            Log.i(TAG, "Loaded cascade classifier from " + mCascadeFile.getAbsolutePath());
                        }

                        is = getResources().openRawResource(rawResources[11]); // see mItemEye in MainActivity
                        final File eyeCascadeFile = new File(cascadeDir, haarXML[11]);
                        os = new FileOutputStream(eyeCascadeFile);
                        while ((bytesRead = is.read(buffer)) != -1) {
                            os.write(buffer, 0, bytesRead);
                        }
                        is.close();
                        os.close();
                        mEyeDetector = new CascadeClassifier(eyeCascadeFile.getAbsolutePath());
                        if (mEyeDetector.empty()) {
                            Log.e(TAG, "Failed to load cascade classifier " + eyeCascadeFile.toString());
                            mEyeDetector = null;
                        } else{
                            Log.i(TAG, "Loaded cascade classifier from " + eyeCascadeFile.getAbsolutePath());
                        }

                        cascadeDir.delete();

                    } catch (IOException e) {
                        e.printStackTrace();
                        Log.i(TAG, "Failed to load cascade. Exception thrown: " + e);
                    }

                    mOpenCvCameraView.enableView();
                    mOpenCvCameraView.setCameraIndex(CameraBridgeViewBase.CAMERA_ID_FRONT);//前置摄像头
                }

                break;

                default: {
                    super.onManagerConnected(status);
                }

                break;
            }
        }
    };

}
